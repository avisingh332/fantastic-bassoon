pipeline {
    agent any
    
    tools {
    jdk 'JDK17'
  }
     options {
        skipDefaultCheckout(true)
    }
    environment {
        sonarScanner = tool 'sonar-scanner' 
        DOTNET_CLI_HOME = "/tmp/DOTNET_CLI_HOME"
        IMAGE_NAME = 'avisingh332/dotnettestimage'
        IMAGE_TAG = 'latest'
    }

    stages {

        stage('Git SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/avisingh332/fantastic-bassoon.git'
            }
        }
        stage('SonarQube Scan'){
            steps{
                withSonarQubeEnv(installationName: 'sq-1'){
                sh """${sonarScanner}/bin/sonar-scanner \
                -Dsonar.projectKey=DotnetCoreAutomatedPipeline \
                -Dsonar.projectName=DotnetCoreAutomatedPipeline"""
            }
            }
        }
        stage('Build') {
            agent {
                docker {
                     image 'mcr.microsoft.com/dotnet/sdk:6.0'
                     args '--user root' 
                     reuseNode true
                }
            }
            steps {
                sh 'dotnet build "$WORKSPACE/Testing App.sln" --configuration Release'
                sh 'echo "Into the Build Stage"'
            }
        }
        stage('Test'){
            agent {
                docker {
                     image 'mcr.microsoft.com/dotnet/sdk:6.0'
                     args '--user root' 
                     reuseNode true
                }
            }
            steps{
                sh 'dotnet test "$WORKSPACE/Testing App.sln" --logger "trx;LogFileName=./test.trx"'
            }
        }
        stage('Docker Build'){
            steps{
                script{
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}",'"./Testing App"')
                }
            }
        }
        stage('Docker Push'){
            steps{
                script{
                    docker.withRegistry('','DockerHubAvinash'){
                         docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Run Container'){
            steps{
                sh 'docker rm -f mvcApp || true'
                sh 'docker run -d --name mvcApp -p 8000:80  ${IMAGE_NAME}:${IMAGE_TAG}'
            }
        }


    }
}
